from django import formsfrom dit_email_addon.api import DitEmailAddonfrom django.conf import settingsfrom crispy_forms.helper import Layout, FormHelperfrom crispy_forms.layout import Submitfrom crispy_forms.bootstrap import Divfrom django.contrib import messagesfrom wagtailhyper.forms import HyperFormimport threadingdef send_email_async(data):    contact_email = getattr(settings, 'CONTACT_EMAIL', 'sagor@divine-it.net')    DitEmailAddon().send_email_default(contact_email, 'PDF_download_form', data)    DitEmailAddon().send_email_default(data['email'], 'PDF_download_form', data)class DownloadForm(HyperForm):    name = forms.CharField(max_length=255, label='', widget=forms.TextInput(attrs={'placeholder': 'Name'}))    email = forms.EmailField(label='', widget=forms.EmailInput(attrs={'placeholder': 'Email'}))    phone = forms.CharField(max_length=25, required=True, label='',                            widget=forms.TextInput(attrs={'placeholder': 'Mobile'}))    message = forms.CharField(required=True, label='',                              widget=forms.TextInput(attrs={'placeholder': 'Message'}))    def validation_form(self):        if self.name == '' and self.email == '' and self.phone == '' and self.message == '':            disabled = 'disabled'            return disabled        else:            disabled = 'success'            return disabled    def __init__(self, *args, **kwargs):        super().__init__(*args, **kwargs)        self.helper = FormHelper()        self.helper.layout = Layout(            Div(                Div('name', css_class='col-md-12 col-sm-12 col-xs-12'),                css_class='row'            ),            Div(                Div('email', css_class='col-md-12 col-sm-12 col-xs-12'),                css_class='row'            ),            Div(                Div('phone', css_class='col-md-12 col-sm-12 col-xs-12'),                css_class='row'            ),            Div(                Div('message', css_class='col-md-12 col-sm-12 col-xs-12'),                css_class='row'            ),            Div(                Submit('submit', 'Get Offer', css_class='btn btn-primary',                       onclick="window.open('http://ngbps.com/documents/20/Strategies_for_Remote_Work_Netdatavault-Citrix_eBook.pdf');"),                css_class='form-action-wrap text-center'            )        )    def is_valid(self):        if super().is_valid():            threading.Thread(target=send_email_async, args=[self.data]).start()            messages.success(self.request, 'Your message has been sent successfully.')            return True        else:            return False