# Generated by Django 2.0.7 on 2018-07-17 12:20

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtailhyper.fields


class Migration(migrations.Migration):

    dependencies = [
        ('taggit', '0002_auto_20150616_2121'),
        ('wagtailimages', '0020_add-verbose-name'),
        ('wagtailcore', '0040_page_draft_title'),
        ('base', '0002_create_homepage'),
    ]

    operations = [
        migrations.CreateModel(
            name='ApplicationSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theme', models.CharField(choices=[('default', 'default')], default='default', help_text='Select which theme to use', max_length=255)),
                ('website_logo', models.ImageField(blank=True, null=True, upload_to='')),
                ('website_favicon_icon', models.ImageField(blank=True, null=True, upload_to='')),
                ('footer_logo', models.ImageField(blank=True, null=True, upload_to='')),
                ('google_analytics_key', models.CharField(blank=True, max_length=255, null=True)),
                ('facebook_app_id', models.CharField(blank=True, max_length=255, null=True)),
                ('facebook_admins', models.CharField(blank=True, max_length=255, null=True)),
                ('open_graph_type', models.CharField(blank=True, default='website', max_length=30, null=True)),
                ('facebook_url', models.URLField(blank=True, help_text='Your Facebook page URL', null=True)),
                ('instagram_url', models.URLField(blank=True, help_text='Your Instagram URL', null=True)),
                ('twitter_url', models.URLField(blank=True, help_text='Your Twitter URL', null=True)),
                ('google_plus_url', models.URLField(blank=True, help_text='Your google plus URL', null=True)),
                ('youtube_url', models.URLField(blank=True, help_text='Your YouTube channel or user account URL', null=True)),
                ('linkedin_url', models.URLField(blank=True, help_text='Your linkedin URL', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BasicSnippet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('content', wagtailhyper.fields.HyperField()),
            ],
        ),
        migrations.CreateModel(
            name='LinkPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('link_url', models.CharField(blank=True, max_length=255, null=True, verbose_name='link to a custom URL')),
                ('url_append', models.CharField(blank=True, help_text='Use this to optionally append a #hash or querystring to the URL.', max_length=255, verbose_name='append to URL')),
                ('extra_classes', models.CharField(blank=True, help_text='Optionally specify css classes to be added to this page when it appears in menus.', max_length=100, verbose_name='menu item css classes')),
                ('link_page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.Page', verbose_name='link to an internal page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='StandardPageTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='standardpage',
            name='og_description',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='standardpage',
            name='og_image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image'),
        ),
        migrations.AddField(
            model_name='standardpage',
            name='og_title',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='standardpage',
            name='primary_image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image'),
        ),
        migrations.AddField(
            model_name='standardpage',
            name='repeat_in_subnav',
            field=models.BooleanField(default=False, help_text="If checked, a link to this page will be repeated alongside it's direct children when displaying a sub-navigation for this page.", verbose_name='repeat in sub-navigation'),
        ),
        migrations.AddField(
            model_name='standardpage',
            name='repeated_item_text',
            field=models.CharField(blank=True, help_text="e.g. 'Section home' or 'Overview'. If left blank, the page title will be used.", max_length=255, verbose_name='repeated item link text'),
        ),
        migrations.AddField(
            model_name='standardpage',
            name='select_template',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='standardpagetag',
            name='content_object',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='base.StandardPage'),
        ),
        migrations.AddField(
            model_name='standardpagetag',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='base_standardpagetag_items', to='taggit.Tag'),
        ),
        migrations.AddField(
            model_name='applicationsettings',
            name='footer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='base.BasicSnippet'),
        ),
        migrations.AddField(
            model_name='applicationsettings',
            name='site',
            field=models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.Site'),
        ),
        migrations.AddField(
            model_name='standardpage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='base.StandardPageTag', to='taggit.Tag', verbose_name='Tags'),
        ),
    ]
